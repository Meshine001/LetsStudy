apply plugin: 'com.android.application'
apply plugin: 'android-apt'
def AAVersion = '4.0.0'

android {
    compileSdkVersion 23
    buildToolsVersion "23.0.3"

    defaultConfig {
        applicationId "com.meshine.letsstudyclient"
        minSdkVersion 19
        targetSdkVersion 23
        versionCode 1
        versionName "1.0"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    task copyJniLibs(type: Copy) {
        from 'libs/armeabi'
        into 'src/main/jniLibs/'
    }
    tasks.withType(JavaCompile) {
        compileTask -> compileTask.dependsOn(copyJniLibs)
    }
    clean.dependsOn 'cleanCopyJniLibs'
}



dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    testCompile 'junit:junit:4.12'
    compile 'com.android.support:appcompat-v7:23.3.0'
    apt "org.androidannotations:androidannotations:$AAVersion"
    compile "org.androidannotations:androidannotations-api:$AAVersion"
    compile project(':PullToRefresh')
    compile 'com.github.bumptech.glide:glide:3.7.0'
    compile 'com.rockerhieu.emojicon:library:1.2'
    compile 'com.jakewharton:butterknife:7.0.1'
    compile project(':multi-image-selector')
}

apt {
    arguments {
        androidManifestFile variant.outputs[0]?.processResources?.manifestFile
        // if you have multiple outputs (when using splits), you may want to have other index than 0

        // you should set your package name here if you are using different application IDs
        // resourcePackageName "your.package.name"

        // You can set optional annotation processing options here, like these commented options:
        // logLevel 'INFO'
        // logFile '/var/log/aa.log'
    }
}